Это тестовое задание.
Дается перед задачами на программирование
Буквой (V) обозначаю возможные ответы
Гарантий на правильность нет
(в скобках пишу каменты и непонятки)


1. Java это...
- язык с динамической типизацией
- язык со статической типизацией  (V)
- язык со статической линковкой
- язык с JIT - компиляцией

---

2. Что выведет код
System.ot.println("100" + 1);
- 1001
- 101
- Syntax Error  (V) (думаю это - вывело:java: cannot find symbol)
- Compile Error

---

3. Какие из следующих выражений не будут вычислены как true, если
    boolean b1 = true;
    boolean b2 = false;
    int i1 = 1;
    int i2 = 2;

- (i1 | i2) == 3
- i2 && b1   (V) (Operator '&&' cannot be applied to 'int', 'boolean')
- b1 || !b2
- (i1 ^ i2) < 4

---

4. Следующий код выведет:
    String str = "abcde";
    str.trim();
    str.toUpperCase();
    str.substring(3,4);
    System.out.println(str);

- CD
- CDE
- D
- abcde  (V)
(как я понимаю это происходит потому, что строка иммутабельна а новую мы не создаем)

---

5. С помощью какой команды Git можно посмотреть кем и когда редактировался
код в файле
- history
- commit
- log
- blame   (V)

---

6. Чем отличается rebase от merge в Git
- Позволяет при слиянии разрешить конфликты на каждом коммите по отдельности
- Добавляет коммиты ветки-источника в конец ветки назначения так, как будто     (V)
эти коммиты сразу делались на ветке назначении
- При слиянии позволяет объединить все коммиты с ветки источника в один
коммит ветки-назначения
- Если структура коммитов линейна между ветками (коммит ветки назначения
достижим по прямой из коммита ветки-источника) позволяет слить ветки
без создания дополнительных коммитов

---

7. Что такое байт-код JVM
- Промежуточное представление программы, не привязанное к конкретной   (V)
машинной архитектуре
- Промежуточное предстваление программы, привязанное к конкретной
архитектуре
- Название исходного кода, который пишет разработчик
- окончательное  предстваление программы

---

8. Какой из концептов ООП демонстрирует следующий код:
    List[] myList = {
        new ArrayList<>(),
        new LinkedList <>(),
        new Stack<>(),
        new Vector<>(),
    };

    for (List list : myList) {
       list.clear();
    }
- Композиция
- Параметризация (Generics)
- Полиморфизм    (V)
- Энкапсуляция

---

9. Какой тип данных подходит для переменной f
    ... f = x -> {
        return x % 2 == 0 ? "even" : "odd";
    };
- Function <Integer>
- Function <Integer, String>     (V)
- Function <int>
- Function <String>
- Function <Integer, Boolean>

---

10. Определите временную сложность кода:
    void f(int[] a, int[] b) {
        int N = a.length;
        int M = b.length;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                if (a[i] < b [j]){
                    System.out.println(a[i] + "," + b[j]);
                }
            }
        }
    }
- O(N^2)
- O(N)
- O(NM)    (V)
- O(log(N)log(M))
- O(1)
- O(Nlog(M))

---

11. Какое описание больше всего соотвествует понятию "unit-тесты"
- Проверяют корректность работы отдельных, самых маленьких     (V)
элементов системы, функции, методы
- Проверяют, хорошо ли работают вмесвместе различные модули и сервисы,
используемые приложением
- Копируют поведение пользователя при работе с ПО в
контексте всего приложения
- Оценивают работу системы при определенной рабочей нагрузке

---

12 Выберите верные утверждения об интерфейсах
- Интерфейс описывает контракт (функции)   (V)
- Интерфейс хранит состояние (переменные)
- В Интерфейсе можно объявлять константы    (V)
- Интерфейс может иметь стандартную имплементацию  (V)
- Интерфейс не может быть пустым: должен быть хотя бы
один метод
- Методы интерфейса могут быть финальными

---

13. Какой из модификторов запрещает редактирование переменной
после инициализации
- protected
- static
- final   (V)
- private

---

14. Наследники класса создаются при помощи ключевого слова
- extends    (V)
- abstract
- implement
- interfaces

---

15. Как правильно сделать инициализацию переменной
типа byte со значением 200
- byte b = 200;
- var b = 200;
- byte b = (byte)200
- Никак      (V)

---

16.  Дан список сотрудников 'List<Employee> employees', при
этом у класса 'Employee' есть метод 'String getName'. Какой
из вызовов вернет список имен сотрудников?
- employees.collect(e->e.getName());
- employees.filter(Employee::getName)
        .collect(Collectors.toUnmodifiableList());
- employees.stream().map(Employee::getName)                 (V)
        .collect(Collectors.toList())
- employees.stream().collect(e->e.getName());

---

17. Какой из способов инициализации массива правильный
- int arr[] = {22, 2, 10};
- int[] arr = {1, 11, 3};     (V)
- int arr[][] ={1, 2, 3, 4};
- int[] arr = (5,4,3);
- int[] arr={"1", "2", "3"};
- int[] arr = new int[]{33, 41, 0};

---

18. Что произойдет при запуске следующего кода:
Interface Foo {int x = 10;}

public class Test {
    public static void main(String[] arg) {
    Foo.x = 20;
    System.out.println(Foo.x);
    }
}

- 10
- 20
- Ошибка компиляции    (V)
- Ошибка выполнения

---

19. Можно ли объявлять несколько main-методов в коде Java-приложения
- Да  (V)
- Нет

---

20. Какое из утверждений верны в отношении аннотаций
- @interface используется для создания новых аннотаций    (V)
- @Override - встроенная в JDK аннотация    (V)
- Аннотации нельзя применять к полям класса
- @Retention - это мета аннотация   (V)
- Аннотации удаляются после компиляции

21. Следующий код выведет
public class Test {
    public static void main(String[] args) {
        String s1 = new String("abc");
        String s2 = new String("abc");
        System.out.println("s1 == s2 is:" + (s1 == s2));
    }
}
- s1 == s2 is:true
- false
- s1 == s2 is:false
- true     (V)

---

22. Какой из классов не реализует Collection
- java.util.Vector
- java.util.ArrayList
- java.util.HashSet
- java.util.HashMap

---

23. Какой из примитивов синхронизации подойдет для
многопоточного доступа к переменной
- ReentrantLock    (V)
- CountdownLatch
- Future
- Phaser
- CyclicBarrier

---

24. Какое ключевое слово нужно добавить в метод, чтобы
была гарантия, что 2 потока не смогут одновременно запусить
его у одного и того же экземпляра
- native
- volatile
- synchronized    (V)
- lock

---

25. Какой из классов является коневым для всех классов Java
- Any
- Object (V)
- Nothing
- Root

---

26. Какой из классов является корневым для всех исключений
в Java
- Exception
- Error
- Throwable     (V)
- RuntimeException

27. Какой из примеров эквивалентен коду:
    List<Integer> number = List.of(1,2,3,4);
    int total = 0;
    for (Integer x: number) {
        if (x % 2 == 0) total += x*x;
    }
- int total = numbers.stream().transform(x->*x)
                     .filter(x->x%2 == 0).sum();
- int total = numbers.stream().filter(x-> x%2 == 0)
                     .collect(Collectors.toInt());
- int total = numbers.stream()
              .mapToInt(x-> {if(x%2 ==) return x*x}).sum();
- int total = numbers.stream()
              .mapToInt(x-> x%2 == 0 ? x*x:0).sum();     (V)






